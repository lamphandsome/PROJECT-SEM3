@model PROJECT_SEM3.Models.Users
@using PROJECT_SEM3.ViewModels

@{
    var countries = (List<LocationViewModel>)ViewBag.Countries;
    var countriesData = countries?.ToDictionary(c => c.Country, c => c.Cities) ?? new Dictionary<string, List<string>>();
}

<div class="container mt-5">
    <h2 class="text-center mb-4">User Details</h2>

    <form method="post" asp-controller="Account" asp-action="UpdateUserInformation" enctype="multipart/form-data" class="shadow p-4 rounded bg-light">
        <!-- Full Name -->
        <div class="mb-3">
            <label for="fullname" class="form-label">Full Name:</label>
            <input type="text" id="fullname" name="fullname" class="form-control" value="@Model.FullName" placeholder="Enter full name" />
        </div>

        <!-- Country Dropdown -->
        <div class="mb-3">
            <label for="countryDropdown" class="form-label">Country:</label>
            <select id="countryDropdown" class="form-select" onchange="loadCities()" name="country">
                <option value="">-- Select Country --</option>
                @foreach (var country in countries)
                {
                    <option value="@country.Country" selected="@(country.Country == Model.Location?.Country ? "selected" : null)">
                        @country.Country
                    </option>
                }
            </select>
        </div>

        <!-- City Dropdown -->
        <div class="mb-3">
            <label for="cityDropdown" class="form-label">City:</label>
            <select id="cityDropdown" class="form-select" name="city">
                <option value="">-- Select City --</option>
                @if (Model.Location?.City != null && countriesData.ContainsKey(Model.Location.Country))
                {
                    @foreach (var city in countriesData[Model.Location.Country])
                    {
                        <option value="@city" selected="@(city == Model.Location.City ? "selected" : null)">
                            @city
                        </option>
                    }
                }
            </select>
        </div>

        <!-- Date of Birth -->
        <div class="mb-3">
            <label for="dateOfBirth" class="form-label">Date of Birth:</label>
            <input type="date" id="dateOfBirth" name="dateOfBirth" class="form-control"
                   value="@(Model.DateOfBirth != DateTime.MinValue ? Model.DateOfBirth.ToString("yyyy-MM-dd") : "")" />
        </div>

        <!-- Years of Experience -->
        <div class="mb-3">
            <label for="yearOfExperience" class="form-label">Years of Experience:</label>
            <input type="number" id="yearOfExperience" name="yearOfExperience" class="form-control" min="0"
                   value="@Model.YearsOfExperience" placeholder="Enter years of experience" />
        </div>

        <!-- Thumbnail Upload -->
        <div class="mb-3">
            <label for="thumbnail" class="form-label">Thumbnail:</label>
            <input type="file" id="thumbnail" name="thumbnail" class="form-control" accept="image/*" />

            <!-- Display Current Thumbnail -->
            @if (!string.IsNullOrEmpty(Model.Thumbnail))
            {
                <div class="mt-3">
                    <label class="form-label">Current Thumbnail:</label>
                    <div>
                        <img src="@Url.Content(Model.Thumbnail)" alt="Thumbnail" class="img-thumbnail" style="max-width: 150px;" />
                    </div>
                </div>
            }
        </div>

        <button type="submit" class="btn btn-primary w-100">Save</button>
    </form>
</div>

<script>
    const countriesData = @Html.Raw(Json.Serialize(countriesData));

    function loadCities() {
        const selectedCountry = document.getElementById('countryDropdown').value;
        const cityDropdown = document.getElementById('cityDropdown');

        cityDropdown.innerHTML = '<option value="">-- Select City --</option>';

        if (countriesData[selectedCountry]) {
            countriesData[selectedCountry].forEach(city => {
                const option = document.createElement('option');
                option.value = city;
                option.textContent = city;
                cityDropdown.appendChild(option);
            });
        }
    }

    // Auto-load cities for the selected country on page load
    document.addEventListener("DOMContentLoaded", function () {
        const selectedCountry = document.getElementById('countryDropdown').value;
        if (selectedCountry) {
            loadCities();
            const cityDropdown = document.getElementById('cityDropdown');
            cityDropdown.value = "@Model.Location?.City";
        }
    });
</script>
